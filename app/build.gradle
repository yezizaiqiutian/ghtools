apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {

    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
    }

    signingConfigs {
        release {
            keyAlias rootProject.ext.signing["keyAlias"]
            keyPassword rootProject.ext.signing["keyPassword"]
            storeFile file(rootProject.ext.signing["storeFile"])
            storePassword rootProject.ext.signing["storePassword"]
        }
        debug {
            keyAlias rootProject.ext.signing["keyAlias"]
            keyPassword rootProject.ext.signing["keyPassword"]
            storeFile file(rootProject.ext.signing["storeFile"])
            storePassword rootProject.ext.signing["storePassword"]
        }
    }

    buildTypes {
        //正式包
        release {
            // 混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
        //测试包
        debug {
            // 混淆
            minifyEnabled false
            // Zipalign优化
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "APP_${variant.versionCode}-${variant.versionName}-${releaseTime()}.apk"
        }
//        variant.outputs.all { output ->
//            def outputFile = variant.getPackageApplicationProvider().get().outputDirectory
//            def fileName
//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                fileName = "FBSFinance_${productFlavors[0].name}_${variant.buildType.name}_v${defaultConfig.versionName}_${releaseTime()}.apk"
//                outputFileName = fileName
//            }
//        }
    }

    flavorDimensions rootProject.ext.flavors["dimension"]
    productFlavors {
        //生产环境
        online {
            buildConfigField "String", "BASE_URL", rootProject.ext.flavors["baseurl_online"]
            dimension rootProject.ext.flavors["dimension"]
            applicationId rootProject.ext.flavors["applicationId_online"]
            resValue "string", "app_name", rootProject.ext.flavors["appname_online"]
            manifestPlaceholders = [app_icon: rootProject.ext.flavors["appicon_online"]]
        }
        //个人运行
        debugenv {
            buildConfigField "String", "BASE_URL", rootProject.ext.flavors["baseurl_debugenv"]
            dimension rootProject.ext.flavors["dimension"]
            applicationId rootProject.ext.flavors["applicationId_debugenv"]
            resValue "string", "app_name", rootProject.ext.flavors["appname_debugenv"]
            manifestPlaceholders = [app_icon: rootProject.ext.flavors["appicon_debugenv"]]
        }
    }

}

static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation rootProject.ext.dependencies["appcompat-x"]
    implementation rootProject.ext.dependencies["constraint"]

    //工具库
    implementation project(":commonlib")
    //联网库
    implementation project(":netlib")

    //注解
    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

    //下拉刷新
    implementation rootProject.ext.dependencies["smartrefreshlayout"]
    implementation rootProject.ext.dependencies["smartrefreshheader"]

    //6.0权限
    implementation rootProject.ext.dependencies["andpermission"]

    //tablayout
    implementation rootProject.ext.dependencies["flycotablayout_lib"]

    //流式布局
    implementation rootProject.ext.dependencies["flowlayout"]

    //沉浸模式
    implementation rootProject.ext.dependencies["statusbarutil"]

    //recyclerviewadapter
    implementation rootProject.ext.dependencies["baserecyclerviewadapterhelper"]

    implementation rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]

    //eventbus
    implementation rootProject.ext.dependencies["eventbus"]

    //design
    implementation rootProject.ext.dependencies["design"]

}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        def requested = details.requested
        if (requested.group == "com.android.support") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion rootProject.ext.version["androidSupportSdkVersion"]
            }
        }
    }
}
